stages:
- build
- test
- run

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2


# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip

build:setup:
  image: python:3.7.2
  stage: build
  script:
    # Setup virtualenv and dependencies
    - python -V  # Print out python version for debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
  artifacts:
    paths:
      - venv

build:
  image: docker:19.03.12
  stage: build
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  script:
    - apk update
    - apk add git make
    - make > /dev/null
    # - git config --global user.name "Mr.Roboto ðŸ¤–"
    # - git config --global user.email "mrRoboto@blockdaemon.com"
    # - git add ./ubiquity ./docs
    # - git status | grep "nothing to commit, working tree clean\|nothing \(added \).*to commit" || git commit -a -m "UB-00 Updating generated code with changes from ${CI_JOB_ID}"
    # - git push http://gitlab-ci-token:${AUTH_TOKEN_UBIQUITY_PYTHON_CLIENT}@gitlab.com/Blockdaemon/ubiquity/ubiquity-python-client.git HEAD:master
  #only:
  #    refs:
  #      - master
  #    changes:
  #      - spec/openapi.yaml
  dependencies:
    - build:setup


test:
  image: python:3.7.2
  stage: test
  script:
    #- source venv/bin/activate
    - venv/bin/python -m pip install -r test-requirements.txt
    - PYTHON_INTERPRETER=venv/bin/python make test
  dependencies:
    - build:setup
    - build

run:
  image: python:3.7.2
  stage: run
  script:
    - python setup.py bdist_wheel
    # an alternative approach is to install and run:
    - pip install dist/*
    # run the command here
  artifacts:
    paths:
      - dist/*.whl
  dependencies:
    - build:setup
    - build

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
