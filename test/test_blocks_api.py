"""
    Ubiquity REST API

    Ubiquity provides a RESTful and uniform way to access blockchain resources, with a rich and reusable model across multiple cryptocurrencies.  [Documentation](https://app.blockdaemon.com/docs/ubiquity)  ### Protocols #### Mainnet The following protocols are currently supported: * bitcoin * ethereum * polkadot * xrp * algorand * stellar  #### Testnet Testnet support coming soon  ##### Pagination Certain resources contain a lot of data, more than what's practical to return for a single request. With the help of pagination, the data is split across multiple responses. Each response returns a subset of the items requested and a continuation token.  To get the next batch of items, copy the returned continuation token to the continuation query parameter and repeat the request with the new URL. In case no continuation token is returned, there is no more data available.   # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@blockdaemon.com
    Generated by: https://openapi-generator.tech
"""

import json
import unittest

import test.mock
import test.utils
import ubiquity
from ubiquity.api import (
    blocks_api,
    ApiClient,
)
from ubiquity import Configuration

import httpretty
import urllib3


class TestBlocksApi(unittest.TestCase):
    """BlocksApi unit test stubs"""
    def setUp(self):
        self.api_client = ApiClient(Configuration())
        self.api_instance = blocks_api.BlocksApi(self.api_client)  # noqa: E501
        self.platforms = test.utils.get_platform_enum_values()

        self.block_numbers = {
            platform: test.mock.get_mock_file_content(
                f'sync_api/sync_block_number_{platform}.json')[:-2]
            for platform in self.platforms
        }
        self.block_ids = {
            platform: test.mock.get_mock_file_content(
                f'sync_api/sync_block_id_{platform}.json')[1:-2]
            for platform in self.platforms
        }

    def tearDown(self):
        pass

    # Helper methods
    def get_block_identifier_from_block(self, block):
        return {
            "number": block["number"],
            "id": block["id"],
            "parent_id": block["parent_id"]
        }

    def get_blocks_endpoints(self,
                             network,
                             path,
                             supported_platforms,
                             block_identifier_endpoint=False):

        block_api_path = "block" + ("_identifier"
                                    if block_identifier_endpoint else "")

        get_mocked_content = lambda platform: test.mock.get_mock_file_content(
            f'blocks_api/{platform}.json')
        endpoints = [{
            "req_url":
            f"/{platform}/{network}/{block_api_path}/{self.block_ids[platform] if path == 'id' else self.block_numbers[platform]}",
            "method":
            httpretty.GET,
            "status":
            200,
            "response_data":
            json.dumps(
                self.get_block_identifier_from_block(
                    json.loads(get_mocked_content(platform))))
            if block_identifier_endpoint else get_mocked_content(platform)
        } for platform in supported_platforms]

        return endpoints

    def call_endpoints(self, endpoints, platforms, identifiers):
        for platform in platforms:
            try:
                res = self.api_instance.get_block(platform,
                                                identifiers[platform])
                # quick check to assert if object is not only a block identifier
                assert "txs" in res
            except Exception as e:
                print('error when calling platform', platform)
                raise e

    def call_endpoints_get_identifier(self, endpoints, platforms, identifiers):
        for platform in platforms:
            try:
                res = self.api_instance.get_block_identifier(
                    platform, identifiers[platform])

                # quick check to assert if object is not a whole block object
                assert not "txs" in res
            except Exception as e:
                print('error when calling platform', platform)
                raise e

    @httpretty.activate(verbose=True, allow_net_connect=False)
    def test_get_block_by_id(self):
        network = "mainnet"
        supported_platforms = test.mock.get_supported_platforms(
            self.platforms, "/block/:id")
        assert len(supported_platforms) > 0

        endpoints = self.get_blocks_endpoints(network, "id",
                                              supported_platforms)
        test.mock.setup_mock_server(self.api_client.configuration.host,
                                    endpoints)

        self.call_endpoints(endpoints, supported_platforms, self.block_ids)

    @httpretty.activate(verbose=True, allow_net_connect=False)
    def test_get_block_by_number(self):
        network = "mainnet"
        supported_platforms = test.mock.get_supported_platforms(
            self.platforms, "/block/:number")
        assert len(supported_platforms) > 0

        endpoints = self.get_blocks_endpoints(network, "number",
                                              supported_platforms)
        test.mock.setup_mock_server(self.api_client.configuration.host,
                                    endpoints)
        self.call_endpoints(endpoints, supported_platforms, self.block_numbers)

    @httpretty.activate(verbose=True, allow_net_connect=False)
    def test_get_block_identifier_by_number(self):
        network = "mainnet"
        supported_platforms = test.mock.get_supported_platforms(
            self.platforms, "/block_identifier/:number")
        assert len(supported_platforms) > 0

        endpoints = self.get_blocks_endpoints(network,
                                              "number",
                                              supported_platforms,
                                              block_identifier_endpoint=True)
        test.mock.setup_mock_server(self.api_client.configuration.host,
                                    endpoints)
        self.call_endpoints_get_identifier(endpoints, supported_platforms,
                                           self.block_numbers)

    @httpretty.activate(verbose=True, allow_net_connect=False)
    def test_get_block_identifier_by_id(self):
        network = "mainnet"
        supported_platforms = test.mock.get_supported_platforms(
            self.platforms, "/block_identifier/:id")
        assert len(supported_platforms) > 0

        endpoints = self.get_blocks_endpoints(network,
                                              "id",
                                              supported_platforms,
                                              block_identifier_endpoint=True)
        test.mock.setup_mock_server(self.api_client.configuration.host,
                                    endpoints)
        self.call_endpoints_get_identifier(endpoints, supported_platforms,
                                           self.block_ids)


if __name__ == '__main__':
    unittest.main()
